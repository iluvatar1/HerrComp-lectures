Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.integrate import solve_bvp
sns.set()
sns.set_context("talk")

def deriv(t, y, params):
    ### BEGIN SOLUTION
    return [y[1], params[1]*y[0]/params[0] - params[2]*y[1]]
    ### END SOLUTION
    

def bc(ya, yb, params):
    ### BEGIN SOLUTION
    return [ya[0]-0.1, yb[0]] # change the initial velocity
    ### END SOLUTION
    

def mysolve_bvp(x, y0, params):
    ### BEGIN SOLUTION
    # model it as a 2-arg funtion, params are physical and should not change
    f_wrapper = lambda x, y0: deriv(x, y0, params)
    bc_wrapper = lambda ya, yb: bc(ya, yb, params)
    sol = solve_bvp(f_wrapper, bc_wrapper, x, y0, verbose=2) # print more info
    ### END SOLUTION
    
    return sol

for PARAMS in [np.array([1.5e-6, 5e-6, 0.0]), np.array([1.5e-6, 5e-6, 4.8920])]:
    x = np.linspace(0, 4.0, 100)
    y0 = np.ones((2, x.size))
    fig, ax = plt.subplots()
    ax.plot(sol.x, sol.y[0])
    print(sol.p)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[6], line 34[0m
[1;32m     32[0m y0 [38;5;241m=[39m np[38;5;241m.[39mones(([38;5;241m2[39m, x[38;5;241m.[39msize))
[1;32m     33[0m fig, ax [38;5;241m=[39m plt[38;5;241m.[39msubplots()
[0;32m---> 34[0m ax[38;5;241m.[39mplot([43msol[49m[38;5;241m.[39mx, sol[38;5;241m.[39my[[38;5;241m0[39m])
[1;32m     35[0m [38;5;28mprint[39m(sol[38;5;241m.[39mp)

[0;31mNameError[0m: name 'sol' is not defined

